// Generated from miniPascalLang.g4 by ANTLR 4.4
import org.antlr.v4.runtime.Lexer;
import org.antlr.v4.runtime.CharStream;
import org.antlr.v4.runtime.Token;
import org.antlr.v4.runtime.TokenStream;
import org.antlr.v4.runtime.*;
import org.antlr.v4.runtime.atn.*;
import org.antlr.v4.runtime.dfa.DFA;
import org.antlr.v4.runtime.misc.*;

@SuppressWarnings({"all", "warnings", "unchecked", "unused", "cast"})
public class miniPascalLangLexer extends Lexer {
	static { RuntimeMetaData.checkVersion("4.4", RuntimeMetaData.VERSION); }

	protected static final DFA[] _decisionToDFA;
	protected static final PredictionContextCache _sharedContextCache =
		new PredictionContextCache();
	public static final int
		T__20=1, T__19=2, T__18=3, T__17=4, T__16=5, T__15=6, T__14=7, T__13=8, 
		T__12=9, T__11=10, T__10=11, T__9=12, T__8=13, T__7=14, T__6=15, T__5=16, 
		T__4=17, T__3=18, T__2=19, T__1=20, T__0=21, Operacao=22, Digitos=23, 
		Letras=24, TRUE=25, FALSE=26, SC=27, V=28, OP=29, CP=30, TD=31, TDE=32, 
		NOT=33, WS=34;
	public static String[] modeNames = {
		"DEFAULT_MODE"
	};

	public static final String[] tokenNames = {
		"'\\u0000'", "'\\u0001'", "'\\u0002'", "'\\u0003'", "'\\u0004'", "'\\u0005'", 
		"'\\u0006'", "'\\u0007'", "'\b'", "'\t'", "'\n'", "'\\u000B'", "'\f'", 
		"'\r'", "'\\u000E'", "'\\u000F'", "'\\u0010'", "'\\u0011'", "'\\u0012'", 
		"'\\u0013'", "'\\u0014'", "'\\u0015'", "'\\u0016'", "'\\u0017'", "'\\u0018'", 
		"'\\u0019'", "'\\u001A'", "'\\u001B'", "'\\u001C'", "'\\u001D'", "'\\u001E'", 
		"'\\u001F'", "' '", "'!'", "'\"'"
	};
	public static final String[] ruleNames = {
		"T__20", "T__19", "T__18", "T__17", "T__16", "T__15", "T__14", "T__13", 
		"T__12", "T__11", "T__10", "T__9", "T__8", "T__7", "T__6", "T__5", "T__4", 
		"T__3", "T__2", "T__1", "T__0", "Operacao", "Digitos", "Letras", "TRUE", 
		"FALSE", "SC", "V", "OP", "CP", "TD", "TDE", "NOT", "WS"
	};


	public miniPascalLangLexer(CharStream input) {
		super(input);
		_interp = new LexerATNSimulator(this,_ATN,_decisionToDFA,_sharedContextCache);
	}

	@Override
	public String getGrammarFileName() { return "miniPascalLang.g4"; }

	@Override
	public String[] getTokenNames() { return tokenNames; }

	@Override
	public String[] getRuleNames() { return ruleNames; }

	@Override
	public String getSerializedATN() { return _serializedATN; }

	@Override
	public String[] getModeNames() { return modeNames; }

	@Override
	public ATN getATN() { return _ATN; }

	public static final String _serializedATN =
		"\3\u0430\ud6d1\u8206\uad2d\u4417\uaef1\u8d80\uaadd\2$\u00f1\b\1\4\2\t"+
		"\2\4\3\t\3\4\4\t\4\4\5\t\5\4\6\t\6\4\7\t\7\4\b\t\b\4\t\t\t\4\n\t\n\4\13"+
		"\t\13\4\f\t\f\4\r\t\r\4\16\t\16\4\17\t\17\4\20\t\20\4\21\t\21\4\22\t\22"+
		"\4\23\t\23\4\24\t\24\4\25\t\25\4\26\t\26\4\27\t\27\4\30\t\30\4\31\t\31"+
		"\4\32\t\32\4\33\t\33\4\34\t\34\4\35\t\35\4\36\t\36\4\37\t\37\4 \t \4!"+
		"\t!\4\"\t\"\4#\t#\3\2\3\2\3\2\3\2\3\3\3\3\3\3\3\3\3\3\3\4\3\4\3\4\3\4"+
		"\3\4\3\4\3\4\3\4\3\5\3\5\3\5\3\5\3\5\3\5\3\5\3\5\3\6\3\6\3\6\3\6\3\6\3"+
		"\6\3\6\3\6\3\6\3\6\3\7\3\7\3\7\3\7\3\7\3\7\3\b\3\b\3\b\3\t\3\t\3\t\3\n"+
		"\3\n\3\n\3\n\3\n\3\n\3\n\3\13\3\13\3\13\3\13\3\13\3\13\3\13\3\13\3\f\3"+
		"\f\3\f\3\f\3\r\3\r\3\r\3\r\3\r\3\16\3\16\3\16\3\16\3\16\3\16\3\17\3\17"+
		"\3\17\3\20\3\20\3\20\3\20\3\21\3\21\3\21\3\21\3\22\3\22\3\23\3\23\3\24"+
		"\3\24\3\24\3\24\3\24\3\25\3\25\3\26\3\26\3\26\3\26\3\26\3\27\3\27\3\27"+
		"\3\27\3\27\3\27\3\27\3\27\3\27\5\27\u00b9\n\27\3\30\6\30\u00bc\n\30\r"+
		"\30\16\30\u00bd\3\30\3\30\6\30\u00c2\n\30\r\30\16\30\u00c3\5\30\u00c6"+
		"\n\30\3\31\3\31\3\31\7\31\u00cb\n\31\f\31\16\31\u00ce\13\31\5\31\u00d0"+
		"\n\31\3\32\3\32\3\32\3\32\3\32\3\33\3\33\3\33\3\33\3\33\3\33\3\34\3\34"+
		"\3\35\3\35\3\36\3\36\3\37\3\37\3 \3 \3!\3!\3!\3\"\3\"\3\"\3\"\3#\3#\3"+
		"#\3#\2\2$\3\3\5\4\7\5\t\6\13\7\r\b\17\t\21\n\23\13\25\f\27\r\31\16\33"+
		"\17\35\20\37\21!\22#\23%\24\'\25)\26+\27-\30/\31\61\32\63\33\65\34\67"+
		"\359\36;\37= ?!A\"C#E$\3\2\7\3\2\62;\3\2c|\3\2C\\\5\2\62;C\\c|\5\2\13"+
		"\f\17\17\"\"\u00fa\2\3\3\2\2\2\2\5\3\2\2\2\2\7\3\2\2\2\2\t\3\2\2\2\2\13"+
		"\3\2\2\2\2\r\3\2\2\2\2\17\3\2\2\2\2\21\3\2\2\2\2\23\3\2\2\2\2\25\3\2\2"+
		"\2\2\27\3\2\2\2\2\31\3\2\2\2\2\33\3\2\2\2\2\35\3\2\2\2\2\37\3\2\2\2\2"+
		"!\3\2\2\2\2#\3\2\2\2\2%\3\2\2\2\2\'\3\2\2\2\2)\3\2\2\2\2+\3\2\2\2\2-\3"+
		"\2\2\2\2/\3\2\2\2\2\61\3\2\2\2\2\63\3\2\2\2\2\65\3\2\2\2\2\67\3\2\2\2"+
		"\29\3\2\2\2\2;\3\2\2\2\2=\3\2\2\2\2?\3\2\2\2\2A\3\2\2\2\2C\3\2\2\2\2E"+
		"\3\2\2\2\3G\3\2\2\2\5K\3\2\2\2\7P\3\2\2\2\tX\3\2\2\2\13`\3\2\2\2\rj\3"+
		"\2\2\2\17p\3\2\2\2\21s\3\2\2\2\23v\3\2\2\2\25}\3\2\2\2\27\u0085\3\2\2"+
		"\2\31\u0089\3\2\2\2\33\u008e\3\2\2\2\35\u0094\3\2\2\2\37\u0097\3\2\2\2"+
		"!\u009b\3\2\2\2#\u009f\3\2\2\2%\u00a1\3\2\2\2\'\u00a3\3\2\2\2)\u00a8\3"+
		"\2\2\2+\u00aa\3\2\2\2-\u00b8\3\2\2\2/\u00bb\3\2\2\2\61\u00cf\3\2\2\2\63"+
		"\u00d1\3\2\2\2\65\u00d6\3\2\2\2\67\u00dc\3\2\2\29\u00de\3\2\2\2;\u00e0"+
		"\3\2\2\2=\u00e2\3\2\2\2?\u00e4\3\2\2\2A\u00e6\3\2\2\2C\u00e9\3\2\2\2E"+
		"\u00ed\3\2\2\2GH\7x\2\2HI\7c\2\2IJ\7t\2\2J\4\3\2\2\2KL\7e\2\2LM\7j\2\2"+
		"MN\7c\2\2NO\7t\2\2O\6\3\2\2\2PQ\7d\2\2QR\7q\2\2RS\7q\2\2ST\7n\2\2TU\7"+
		"g\2\2UV\7c\2\2VW\7p\2\2W\b\3\2\2\2XY\7k\2\2YZ\7p\2\2Z[\7v\2\2[\\\7g\2"+
		"\2\\]\7i\2\2]^\7g\2\2^_\7t\2\2_\n\3\2\2\2`a\7r\2\2ab\7t\2\2bc\7q\2\2c"+
		"d\7e\2\2de\7g\2\2ef\7f\2\2fg\7w\2\2gh\7t\2\2hi\7g\2\2i\f\3\2\2\2jk\7y"+
		"\2\2kl\7j\2\2lm\7k\2\2mn\7n\2\2no\7g\2\2o\16\3\2\2\2pq\7k\2\2qr\7h\2\2"+
		"r\20\3\2\2\2st\7q\2\2tu\7t\2\2u\22\3\2\2\2vw\7u\2\2wx\7v\2\2xy\7t\2\2"+
		"yz\7k\2\2z{\7p\2\2{|\7i\2\2|\24\3\2\2\2}~\7r\2\2~\177\7t\2\2\177\u0080"+
		"\7q\2\2\u0080\u0081\7i\2\2\u0081\u0082\7t\2\2\u0082\u0083\7c\2\2\u0083"+
		"\u0084\7o\2\2\u0084\26\3\2\2\2\u0085\u0086\7f\2\2\u0086\u0087\7k\2\2\u0087"+
		"\u0088\7x\2\2\u0088\30\3\2\2\2\u0089\u008a\7g\2\2\u008a\u008b\7n\2\2\u008b"+
		"\u008c\7u\2\2\u008c\u008d\7g\2\2\u008d\32\3\2\2\2\u008e\u008f\7d\2\2\u008f"+
		"\u0090\7g\2\2\u0090\u0091\7i\2\2\u0091\u0092\7k\2\2\u0092\u0093\7p\2\2"+
		"\u0093\34\3\2\2\2\u0094\u0095\7f\2\2\u0095\u0096\7q\2\2\u0096\36\3\2\2"+
		"\2\u0097\u0098\7g\2\2\u0098\u0099\7p\2\2\u0099\u009a\7f\2\2\u009a \3\2"+
		"\2\2\u009b\u009c\7c\2\2\u009c\u009d\7p\2\2\u009d\u009e\7f\2\2\u009e\""+
		"\3\2\2\2\u009f\u00a0\7,\2\2\u00a0$\3\2\2\2\u00a1\u00a2\7-\2\2\u00a2&\3"+
		"\2\2\2\u00a3\u00a4\7v\2\2\u00a4\u00a5\7j\2\2\u00a5\u00a6\7g\2\2\u00a6"+
		"\u00a7\7p\2\2\u00a7(\3\2\2\2\u00a8\u00a9\7/\2\2\u00a9*\3\2\2\2\u00aa\u00ab"+
		"\7t\2\2\u00ab\u00ac\7g\2\2\u00ac\u00ad\7c\2\2\u00ad\u00ae\7n\2\2\u00ae"+
		",\3\2\2\2\u00af\u00b9\7?\2\2\u00b0\u00b1\7>\2\2\u00b1\u00b9\7@\2\2\u00b2"+
		"\u00b9\7>\2\2\u00b3\u00b4\7>\2\2\u00b4\u00b9\7?\2\2\u00b5\u00b6\7@\2\2"+
		"\u00b6\u00b9\7?\2\2\u00b7\u00b9\7@\2\2\u00b8\u00af\3\2\2\2\u00b8\u00b0"+
		"\3\2\2\2\u00b8\u00b2\3\2\2\2\u00b8\u00b3\3\2\2\2\u00b8\u00b5\3\2\2\2\u00b8"+
		"\u00b7\3\2\2\2\u00b9.\3\2\2\2\u00ba\u00bc\t\2\2\2\u00bb\u00ba\3\2\2\2"+
		"\u00bc\u00bd\3\2\2\2\u00bd\u00bb\3\2\2\2\u00bd\u00be\3\2\2\2\u00be\u00c5"+
		"\3\2\2\2\u00bf\u00c1\7\60\2\2\u00c0\u00c2\t\2\2\2\u00c1\u00c0\3\2\2\2"+
		"\u00c2\u00c3\3\2\2\2\u00c3\u00c1\3\2\2\2\u00c3\u00c4\3\2\2\2\u00c4\u00c6"+
		"\3\2\2\2\u00c5\u00bf\3\2\2\2\u00c5\u00c6\3\2\2\2\u00c6\60\3\2\2\2\u00c7"+
		"\u00d0\t\3\2\2\u00c8\u00cc\t\4\2\2\u00c9\u00cb\t\5\2\2\u00ca\u00c9\3\2"+
		"\2\2\u00cb\u00ce\3\2\2\2\u00cc\u00ca\3\2\2\2\u00cc\u00cd\3\2\2\2\u00cd"+
		"\u00d0\3\2\2\2\u00ce\u00cc\3\2\2\2\u00cf\u00c7\3\2\2\2\u00cf\u00c8\3\2"+
		"\2\2\u00d0\62\3\2\2\2\u00d1\u00d2\7v\2\2\u00d2\u00d3\7t\2\2\u00d3\u00d4"+
		"\7w\2\2\u00d4\u00d5\7g\2\2\u00d5\64\3\2\2\2\u00d6\u00d7\7h\2\2\u00d7\u00d8"+
		"\7c\2\2\u00d8\u00d9\7n\2\2\u00d9\u00da\7u\2\2\u00da\u00db\7g\2\2\u00db"+
		"\66\3\2\2\2\u00dc\u00dd\7=\2\2\u00dd8\3\2\2\2\u00de\u00df\7.\2\2\u00df"+
		":\3\2\2\2\u00e0\u00e1\7*\2\2\u00e1<\3\2\2\2\u00e2\u00e3\7+\2\2\u00e3>"+
		"\3\2\2\2\u00e4\u00e5\7<\2\2\u00e5@\3\2\2\2\u00e6\u00e7\7<\2\2\u00e7\u00e8"+
		"\7?\2\2\u00e8B\3\2\2\2\u00e9\u00ea\7p\2\2\u00ea\u00eb\7q\2\2\u00eb\u00ec"+
		"\7v\2\2\u00ecD\3\2\2\2\u00ed\u00ee\t\6\2\2\u00ee\u00ef\3\2\2\2\u00ef\u00f0"+
		"\b#\2\2\u00f0F\3\2\2\2\n\2\u00b8\u00bd\u00c3\u00c5\u00ca\u00cc\u00cf\3"+
		"\b\2\2";
	public static final ATN _ATN =
		new ATNDeserializer().deserialize(_serializedATN.toCharArray());
	static {
		_decisionToDFA = new DFA[_ATN.getNumberOfDecisions()];
		for (int i = 0; i < _ATN.getNumberOfDecisions(); i++) {
			_decisionToDFA[i] = new DFA(_ATN.getDecisionState(i), i);
		}
	}
}